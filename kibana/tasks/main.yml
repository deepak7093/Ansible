- shell: if [ -e /opt/kibana-{{ kibana_version }}-{{ kibana_platform }} ]; then echo yes; else echo no; fi;
  register: version_exists
  check_mode: no
  changed_when: False

- name: Download kibana zip
  shell: wget "{{ kibana_download_url }}" && dpkg -i {{ kibana_package }}.{{ kibana_package_ext }} 

- name: export local variable
  shell: echo "export LANGUAGE=en_US.UTF-8 && export LC_ALL=en_US.UTF-8 && export LANG=en_US.UTF-8 && export LC_TYPE=en_US.UTF-8" >> /etc/bash.bashrc

- name: export local variable
  shell: export LANGUAGE=en_US.UTF-8 && export LC_ALL=en_US.UTF-8 && export LANG=en_US.UTF-8 && export LC_TYPE=en_US.UTF-8


- name: capture private_ip
  shell: ifconfig | grep inet | grep -v inet6 | head -1 | awk -F ":" '{print $2}' | awk '{print $1}' 
  register: ip_output


- name: Configuring Kibana
  template: src=kibana.yml.j2 dest=/etc/kibana/kibana.yml owner=root group=root mode=0644
  notify: restart kibana

#- name: Configure kibana
#  shell: sed -i "s/localhost/{{ ip_output }}/g" /etc/kibana/kibana.yml 

- name: Starting kibana
  service: name=kibana state=started enabled=yes
  ignore_errors: "{{ ansible_check_mode }}"


- name: Configuring Kibana proxy
  template: src=nginx.j2 dest=/etc/nginx/sites-available/default owner=root group=root mode=0755
  notify: restart nginx

- shell: if [ -e /tmp/beats-dashboards-{{ kibana_beats_dashboard_version }} ]; then echo yes; else echo no; fi;
  register: beats_dashboard_version_exists
  check_mode: no
  changed_when: False
  tags: ['kibana_config']

- name: Download Beats Dashboard
  get_url:
    url: https://download.elastic.co/beats/dashboards/beats-dashboards-{{ kibana_beats_dashboard_version }}.zip
    dest: /tmp
  when: beats_dashboard_version_exists.stdout == 'no'
  tags: ['kibana_config']

- name: Install unzip 
  shell: apt-get install unzip

- name: Unarchive Beats Dashboard zip
  unarchive:
    src: /tmp/beats-dashboards-{{ kibana_beats_dashboard_version }}.zip
    dest: /tmp
    copy: no
  when: beats_dashboard_version_exists.stdout == 'no'
  tags: ['kibana_config']

- name: Install Beats Dashboard
  shell: ./load.sh -url {{ kibana_elasticsearch_url }}
  args:
    chdir: /tmp/beats-dashboards-{{ kibana_beats_dashboard_version }}
  when: beats_dashboard_version_exists.stdout == 'no'
  tags: ['kibana_config']

- name: Import visualizations
  become: no
  local_action: shell curl -XPUT {{ kibana_elasticsearch_url }}/.kibana/visualization/{{ (item | basename | splitext)[0] }} -T {{ item }}
  with_fileglob: kibana_visaulizations_folder
  tags: ['kibana_config']

- name: Import dashboards
  become: no
  local_action: shell curl -XPUT {{ kibana_elasticsearch_url }}/.kibana/dashboard/{{ (item | basename | splitext)[0] }} -T {{ item }}
  with_fileglob: kibana_dashboards_folder
  tags: ['kibana_config']

- name: Import searches
  become: no
  local_action: shell curl -XPUT {{ kibana_elasticsearch_url }}/.kibana/search/{{ (item | basename | splitext)[0] }} -T {{ item }}
  with_fileglob: kibana_searches_folder
  tags: ['kibana_config']

- name: Import templates
  become: no
  local_action: shell curl -XPUT {{ kibana_elasticsearch_url }}/_template/{{ (item | basename | splitext)[0] }} -T {{ item }}
  with_fileglob: kibana_elasticsearch_templates
  tags: ['kibana_config']

- name: Check nginx config
  become: yes
  command: service nginx configtest
  register: result
  notify: restart nginx
  changed_when: False
  tags: ['kibana_config']

- name: stop logstash
  shell: service kibana stop

- name: Add supervisor config
  template: src=kibana.conf.j2 dest=/etc/supervisor/conf.d/kibana.conf owner=kibana group=kibana mode=0644
  notify:
    - restart supervisor

- name: update supervisor
  shell: supervisorctl update


- name: Flush handlers
  meta: flush_handlers
